-- CREATE TABLE SALI

CREATE TABLE COLEGIUL_CODREANU.SALI
(
ID_SALA SMALLINT(6) NOT NULL PRIMARY KEY,
DENUMIRE_SALA VARCHAR(20) NOT NULL UNIQUE
);

-- CREATE TRIGGER SALI_BEFORE_INSERT

DELIMITER $
CREATE TRIGGER SALI_BEFORE_INSERT
BEFORE INSERT ON COLEGIUL_CODREANU.SALI
FOR EACH ROW 
BEGIN
	DECLARE MESSAGE_TEXT VARCHAR(100);
	IF LENGTH(NEW.ID_SALA) <> 3 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "ID_SALA MUST HAVE 3 DIGITS!";
	END IF;
	SET NEW.DENUMIRE_SALA = UPPER(NEW.DENUMIRE_SALA);
END$
DELIMITER ;

-- CREATE TRIGGER SALI_BEFORE_UPDATE

DELIMITER $
CREATE TRIGGER SALI_BEFORE_UPDATE
BEFORE UPDATE ON COLEGIUL_CODREANU.SALI
FOR EACH ROW 
BEGIN
	DECLARE MESSAGE_TEXT VARCHAR(100);
	IF LENGTH(NEW.ID_SALA) <> 3 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "ID_SALA MUST HAVE 3 DIGITS!";
	END IF;
	SET NEW.DENUMIRE_SALA = UPPER(NEW.DENUMIRE_SALA);
END$
DELIMITER ;

-- CREATE TABLE ANI_SCOLARI

CREATE TABLE COLEGIUL_CODREANU.ANI_SCOLARI
(
ID_AN_CLASA TINYINT(2) NOT NULL PRIMARY KEY
);

-- CREATE TABLE SPECIALIZARI

CREATE TABLE COLEGIUL_CODREANU.SPECIALIZARI
(
ID_PROFIL TINYINT(2) NOT NULL PRIMARY KEY,
DENUMIRE_PROFIL VARCHAR(30) NOT NULL UNIQUE
);

-- CREATE TRIGGER SPECIALIZARI_BEFORE_INSERT

DELIMITER $
CREATE TRIGGER SPECIALIZARI_BEFORE_INSERT
BEFORE INSERT ON COLEGIUL_CODREANU.SPECIALIZARI
FOR EACH ROW 
BEGIN
	DECLARE MESSAGE_TEXT VARCHAR(50);
	IF LENGTH(NEW.ID_PROFIL) <> 2 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "ID_PROFIL MUST HAVE 2 DIGITS!";
	END IF;
	SET NEW.DENUMIRE_PROFIL = UPPER(NEW.DENUMIRE_PROFIL);
END$
DELIMITER ;

-- CREATE TRIGGER SPECIALIZARI_BEFORE_UPDATE

DELIMITER $
CREATE TRIGGER SPECIALIZARI_BEFORE_UPDATE
BEFORE UPDATE ON COLEGIUL_CODREANU.SPECIALIZARI
FOR EACH ROW 
BEGIN
	DECLARE MESSAGE_TEXT VARCHAR(50);
	IF LENGTH(NEW.ID_PROFIL) <> 2 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "ID_PROFIL MUST HAVE 2 DIGITS!";
	END IF;
	SET NEW.DENUMIRE_PROFIL = UPPER(NEW.DENUMIRE_PROFIL);
END$
DELIMITER ;

-- CREATE TABLE PROFESORI

CREATE TABLE COLEGIUL_CODREANU.PROFESORI
(
ID_PROFESOR SMALLINT(4) NOT NULL PRIMARY KEY AUTO_INCREMENT,
NUME_PROFESOR VARCHAR(30) NOT NULL, 
PRENUME_PROFESOR VARCHAR(30) NOT NULL
);

ALTER TABLE COLEGIUL_CODREANU.PROFESORI AUTO_INCREMENT = 1000;

-- CREATE TRIGGER PROFESORI_BEFORE_INSERT

DELIMITER $
CREATE TRIGGER PROFESORI_BEFORE_INSERT
BEFORE INSERT ON COLEGIUL_CODREANU.PROFESORI
FOR EACH ROW 
BEGIN
	SET NEW.NUME_PROFESOR = UPPER(NEW.NUME_PROFESOR);
    SET NEW.PRENUME_PROFESOR = UPPER(NEW.PRENUME_PROFESOR);
END$
DELIMITER ;

-- CREATE TRIGGER PROFESORI_BEFORE_UPDATE

DELIMITER $
CREATE TRIGGER PROFESORI_BEFORE_UPDATE
BEFORE UPDATE ON COLEGIUL_CODREANU.PROFESORI
FOR EACH ROW 
BEGIN
	SET NEW.NUME_PROFESOR = UPPER(NEW.NUME_PROFESOR);
    SET NEW.PRENUME_PROFESOR = UPPER(NEW.PRENUME_PROFESOR);
END$
DELIMITER ;

-- CREATE TABLE DISCIPLINE

CREATE TABLE COLEGIUL_CODREANU.DISCIPLINE
(
ID_DISCIPLINA SMALLINT(2) NOT NULL PRIMARY KEY AUTO_INCREMENT,
DENUMIRE_DISCIPLINA VARCHAR(30) NOT NULL
);

ALTER TABLE COLEGIUL_CODREANU.DISCIPLINE AUTO_INCREMENT = 10;

-- CREATE TRIGGER DISCIPLINE_BEFORE_INSERT

DELIMITER $
CREATE TRIGGER DISCIPLINE_BEFORE_INSERT
BEFORE INSERT ON COLEGIUL_CODREANU.DISCIPLINE
FOR EACH ROW 
BEGIN
    SET NEW.DENUMIRE_DISCIPLINA = UPPER(NEW.DENUMIRE_DISCIPLINA);
END$
DELIMITER ;

-- CREATE TRIGGER DISCIPLINE_BEFORE_UPDATE

DELIMITER $
CREATE TRIGGER DISCIPLINE_BEFORE_UPDATE
BEFORE UPDATE ON COLEGIUL_CODREANU.DISCIPLINE
FOR EACH ROW 
BEGIN
    SET NEW.DENUMIRE_DISCIPLINA = UPPER(NEW.DENUMIRE_DISCIPLINA);
END$
DELIMITER ;

-- CREATE TABLE PERIOADE

CREATE TABLE COLEGIUL_CODREANU.PERIOADE
(
TIP_PERIOADA CHAR(1) NOT NULL PRIMARY KEY,
DESCRIERE_TIP_PERIOADA VARCHAR(20) NOT NULL UNIQUE
);

-- CREATE TABLE CATEGORII ABSENTE

CREATE TABLE COLEGIUL_CODREANU.CATEGORII_ABSENTE
(
TIP_ABSENTA CHAR(1) NOT NULL PRIMARY KEY,
DESCRIERE_TIP_ABSENTA VARCHAR(10) NOT NULL UNIQUE
);

-- CREATE TABLE SCHIMBURI

CREATE TABLE COLEGIUL_CODREANU.SCHIMBURI
(
ID_SCHIMB TINYINT(1) NOT NULL PRIMARY KEY,
ORA_INCEPUT TIME NOT NULL UNIQUE,
ORA_SFARSIT TIME NOT NULL UNIQUE,
DETALII_SCHIMB VARCHAR(15) NOT NULL
);

-- CREATE TABLE ADRESE_ELEVI

CREATE TABLE COLEGIUL_CODREANU.ADRESE_ELEVI
(
ID_ADRESA INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
STRADA VARCHAR(50) NOT NULL,
NUMAR SMALLINT(3) UNSIGNED NOT NULL,
BLOC VARCHAR(10),
SCARA VARCHAR(5),
ETAJ TINYINT(2) UNSIGNED,
APARTAMENT SMALLINT(3) UNSIGNED,
INDEX ADR_ELV_IDX (STRADA, NUMAR)
);

ALTER TABLE COLEGIUL_CODREANU.ADRESE_ELEVI AUTO_INCREMENT = 100000;

-- CREATE TRIGGER ADRESE_ELEVI_BEFORE_INSERT

DELIMITER $
CREATE TRIGGER ADRESE_ELEVI_BEFORE_INSERT
BEFORE INSERT ON COLEGIUL_CODREANU.ADRESE_ELEVI
FOR EACH ROW 
BEGIN
    SET NEW.STRADA = UPPER(NEW.STRADA);
    SET NEW.BLOC = UPPER(NEW.BLOC);
    SET NEW.SCARA = UPPER(NEW.SCARA);
END$
DELIMITER ;

-- CREATE TRIGGER ADRESE_ELEVI_BEFORE_UPDATE

DELIMITER $
CREATE TRIGGER ADRESE_ELEVI_BEFORE_UPDATE
BEFORE UPDATE ON COLEGIUL_CODREANU.ADRESE_ELEVI
FOR EACH ROW 
BEGIN
    SET NEW.STRADA = UPPER(NEW.STRADA);
    SET NEW.BLOC = UPPER(NEW.BLOC);
    SET NEW.SCARA = UPPER(NEW.SCARA);
END$
DELIMITER ;

-- CREATE TABLE CLASE

CREATE TABLE COLEGIUL_CODREANU.CLASE
(
ID_CLASA CHAR(3) NOT NULL PRIMARY KEY,
CLASA TINYINT(3) UNSIGNED NOT NULL,
ID_SALA SMALLINT(6),
ID_PROFIL TINYINT(4),
ID_SCHIMB TINYINT(4),
FOREIGN KEY ID_SALA_FK1 (ID_SALA) REFERENCES SALI(ID_SALA) ON DELETE SET NULL ON UPDATE CASCADE,
FOREIGN KEY ID_PROFIL_FK1 (ID_PROFIL) REFERENCES SPECIALIZARI(ID_PROFIL) ON DELETE SET NULL ON UPDATE CASCADE,
FOREIGN KEY ID_SCHIMB_FK1 (ID_SCHIMB) REFERENCES SCHIMBURI(ID_SCHIMB) ON DELETE SET NULL ON UPDATE CASCADE
);

-- CREATE TABLE DISCIPLINE_PROFESORI

CREATE TABLE COLEGIUL_CODREANU.DISCIPLINE_PROFESORI
(
ID_PROFESOR SMALLINT(4),
ID_DISCIPLINA SMALLINT(2),
FOREIGN KEY ID_PROF_FK(ID_PROFESOR) REFERENCES PROFESORI(ID_PROFESOR) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY ID_DISC_FK(ID_DISCIPLINA) REFERENCES DISCIPLINE(ID_DISCIPLINA) ON DELETE CASCADE ON UPDATE CASCADE,
PRIMARY KEY DISC_PROF_PK (ID_PROFESOR, ID_DISCIPLINA)
);

-- CREATE TABLE CALENDAR_SCOLAR

CREATE TABLE COLEGIUL_CODREANU.CALENDAR_SCOLAR
(
DATA_INCEPUT DATE NOT NULL UNIQUE,
DATA_SFARSIT DATE NOT NULL UNIQUE,
SEMESTRU TINYINT(1) NOT NULL,
TIP_PERIOADA CHAR(1) NOT NULL,
DESCRIERE_PERIOADA VARCHAR(50),
PRIMARY KEY CAL_SC_PK (DATA_INCEPUT, DATA_SFARSIT, TIP_PERIOADA),
FOREIGN KEY TIP_PER_FK1 (TIP_PERIOADA) REFERENCES PERIOADE(TIP_PERIOADA) ON DELETE NO ACTION ON UPDATE CASCADE
);

-- CREATE TRIGGER CALENDAR_SCOLAR_BEFORE_INSERT

DELIMITER $
CREATE TRIGGER CALENDAR_SCOLAR_BEFORE_INSERT
BEFORE INSERT ON COLEGIUL_CODREANU.CALENDAR_SCOLAR
FOR EACH ROW 
BEGIN
	DECLARE MESSAGE_TEXT VARCHAR(100);
    IF (NEW.DATA_INCEPUT >= NEW.DATA_SFARSIT) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "DATA_INCEPUT MUST BE BEFORE DATA_SFARSIT!";
	END IF;
	SET NEW.DESCRIERE_PERIOADA = UPPER(NEW.DESCRIERE_PERIOADA);
END$
DELIMITER ;

-- CREATE TRIGGER CALENDAR_SCOLAR_BEFORE_UPDATE

DELIMITER $
CREATE TRIGGER CALENDAR_SCOLAR_BEFORE_UPDATE
BEFORE UPDATE ON COLEGIUL_CODREANU.CALENDAR_SCOLAR
FOR EACH ROW 
BEGIN
	DECLARE MESSAGE_TEXT VARCHAR(100);
    IF (NEW.DATA_INCEPUT >= NEW.DATA_SFARSIT) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "DATA_INCEPUT MUST BE BEFORE DATA_SFARSIT!";
	END IF;
	SET NEW.DESCRIERE_PERIOADA = UPPER(NEW.DESCRIERE_PERIOADA);
END$
DELIMITER ;

-- CREATE TABLE ELEVI

CREATE TABLE COLEGIUL_CODREANU.ELEVI
(
NR_MATRICOL INT(8) NOT NULL PRIMARY KEY AUTO_INCREMENT,
NUME_ELEV VARCHAR(30) NOT NULL,
PRENUME_ELEV VARCHAR(30) NOT NULL,
ID_CLASA CHAR(3),
ID_ADRESA INT(6) UNSIGNED,
TELEFON_ELEV VARCHAR(10) UNIQUE,
EMAIL_ELEV VARCHAR(50) UNIQUE,
FOREIGN KEY ID_CLS_FK (ID_CLASA) REFERENCES CLASE(ID_CLASA) ON DELETE SET NULL ON UPDATE CASCADE,
FOREIGN KEY ID_ADR_FK (ID_ADRESA) REFERENCES ADRESE_ELEVI(ID_ADRESA) ON DELETE SET NULL ON UPDATE CASCADE
);

ALTER TABLE COLEGIUL_CODREANU.ELEVI AUTO_INCREMENT = 10000000;

-- CREATE TRIGGER ELEVI_BEFORE_INSERT

DELIMITER $
CREATE TRIGGER ELEVI_BEFORE_INSERT
BEFORE INSERT ON COLEGIUL_CODREANU.ELEVI
FOR EACH ROW 
BEGIN
	SET NEW.NUME_ELEV = UPPER(NEW.NUME_ELEV);
    SET NEW.PRENUME_ELEV = UPPER(NEW.PRENUME_ELEV);
END$
DELIMITER ;

-- CREATE TRIGGER ELEVI_BEFORE_UPDATE

DELIMITER $
CREATE TRIGGER ELEVI_BEFORE_UPDATE
BEFORE UPDATE ON COLEGIUL_CODREANU.ELEVI
FOR EACH ROW 
BEGIN
	SET NEW.NUME_ELEV = UPPER(NEW.NUME_ELEV);
    SET NEW.PRENUME_ELEV = UPPER(NEW.PRENUME_ELEV);
END$
DELIMITER ;

-- CREATE TABLE CURRICULUM_PROFIL

CREATE TABLE COLEGIUL_CODREANU.CURRICULUM_PROFIL
(
ID_PROFIL TINYINT(2),
ID_DISCIPLINA SMALLINT(2),
ID_AN_CLASA TINYINT(2),
PRIMARY KEY CRC_PRF_PK (ID_PROFIL, ID_DISCIPLINA, ID_AN_CLASA),
FOREIGN KEY ID_PRF_FK (ID_PROFIL) REFERENCES SPECIALIZARI(ID_PROFIL) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY ID_DISC_FK2 (ID_DISCIPLINA) REFERENCES DISCIPLINE(ID_DISCIPLINA) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY ID_AN_CLS_FK (ID_AN_CLASA) REFERENCES ANI_SCOLARI(ID_AN_CLASA) ON DELETE CASCADE ON UPDATE CASCADE
);

-- CREATE TABLE ORAR

CREATE TABLE COLEGIUL_CODREANU.ORAR
(
ID_CLASA CHAR(3) NOT NULL,
ID_PROFESOR SMALLINT(4) NOT NULL,
ID_DISCIPLINA SMALLINT(2)NOT NULL,
ID_SALA SMALLINT(3) NOT NULL,
ZI ENUM('LUNI', 'MARTI', 'MIERCURI', 'JOI', 'VINERI') NOT NULL,
ORA TIME NOT NULL,
PRIMARY KEY ORAR_PK (ID_CLASA, ID_PROFESOR, ID_DISCIPLINA, ID_SALA, ZI, ORA),
FOREIGN KEY ID_CLS_FK1 (ID_CLASA) REFERENCES CLASE(ID_CLASA) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY ID_PROF_FK1 (ID_PROFESOR, ID_DISCIPLINA) REFERENCES DISCIPLINE_PROFESORI(ID_PROFESOR, ID_DISCIPLINA) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY ID_SALA_FK2 (ID_SALA) REFERENCES SALI(ID_SALA) ON DELETE CASCADE ON UPDATE CASCADE
);

-- CREATE TRIGGER ORAR_BEFORE_INSERT

DELIMITER $
CREATE TRIGGER ORAR_BEFORE_INSERT
BEFORE INSERT ON COLEGIUL_CODREANU.ORAR
FOR EACH ROW
BEGIN
	DECLARE MESSAGE_TEXT VARCHAR(50);
    IF (NEW.ORA < (SELECT MIN(ORA_INCEPUT) FROM SCHIMBURI)) OR (NEW.ORA > (SELECT MAX(ORA_SFARSIT) FROM SCHIMBURI)) THEN
		SIGNAL SQLSTATE '12345' SET MESSAGE_TEXT = 'VALUE OF ORA IS OUTSIDE THE WORKING HOURS!';
	END IF;
END$
DELIMITER ;

-- CREATE TRIGGER ORAR_BEFORE_UPDATE

DELIMITER $
CREATE TRIGGER ORAR_BEFORE_UPDATE
BEFORE UPDATE ON COLEGIUL_CODREANU.ORAR
FOR EACH ROW
BEGIN
	DECLARE MESSAGE_TEXT VARCHAR(50);
    IF (NEW.ORA < (SELECT MIN(ORA_INCEPUT) FROM SCHIMBURI)) OR (NEW.ORA > (SELECT MAX(ORA_SFARSIT) FROM SCHIMBURI)) THEN
		SIGNAL SQLSTATE '12345' SET MESSAGE_TEXT = 'VALUE OF ORA IS OUTSIDE THE WORKING HOURS!';
	END IF;
END$
DELIMITER ;

-- CREATE TABLE REPARTITIE_CLASE_PROFESORI

CREATE TABLE COLEGIUL_CODREANU.REPARTITIE_CLASE_PROFESORI
(
ID_CLASA CHAR(3),
ID_PROFESORI SMALLINT(4),
PRIMARY KEY REP_PROF_PK (ID_CLASA, ID_PROFESORI),
FOREIGN KEY ID_CLS_FK2 (ID_CLASA) REFERENCES CLASE(ID_CLASA) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY ID_PROF_FK2 (ID_PROFESORI) REFERENCES PROFESORI(ID_PROFESOR) ON DELETE CASCADE ON UPDATE CASCADE
);

-- CREATE TABLE CATALOG_NOTE

CREATE TABLE COLEGIUL_CODREANU.CATALOG_NOTE
(
NR_MATRICOL INT(8),
ID_DISCIPLINA SMALLINT(2),
DATA_NOTA DATE NOT NULL,
ORA_NOTA TIME NOT NULL,
NOTA TINYINT(2) NOT NULL,
PRIMARY KEY (NR_MATRICOL, ID_DISCIPLINA, DATA_NOTA, ORA_NOTA),
FOREIGN KEY NR_MAT_FK (NR_MATRICOL) REFERENCES ELEVI(NR_MATRICOL) ON DELETE NO ACTION ON UPDATE CASCADE,
FOREIGN KEY ID_DISC_FK3 (ID_DISCIPLINA) REFERENCES DISCIPLINE(ID_DISCIPLINA) ON DELETE NO ACTION ON UPDATE CASCADE
);

-- CREATE TRIGGER CATALOG_NOTE_BEFORE_INSERT

DELIMITER $
CREATE TRIGGER CATALOG_NOTE_BEFORE_INSERT 
BEFORE INSERT ON CATALOG_NOTE
FOR EACH ROW 
BEGIN
 	DECLARE MESSAGE_TEXT VARCHAR(100);
 	
    -- NOTA SA FIE INTRE 1 SI 10
     
    IF (NEW.NOTA < 1) OR (NEW.NOTA > 10) THEN
		SIGNAL SQLSTATE '50000' SET MESSAGE_TEXT = 'NOTA IS NOT BETWEEN 1 AND 10';
 	END IF;
 	
    -- ID_DISCIPLINA SA FIE STUDIATA DE ELEV LA CLASA SI PROFIL
    
    IF (NEW.ID_DISCIPLINA) NOT IN
    (
    SELECT CURRICULUM_PROFIL.ID_DISCIPLINA
 	FROM ELEVI,
 		 CLASE,
 		 CURRICULUM_PROFIL
 	WHERE ELEVI.NR_MATRICOL = NEW.NR_MATRICOL
 	AND ELEVI.ID_CLASA = CLASE.ID_CLASA
 	AND CLASE.CLASA = CURRICULUM_PROFIL.ID_AN_CLASA
 	AND CLASE.ID_PROFIL = CURRICULUM_PROFIL.ID_PROFIL
    ) THEN
		SIGNAL SQLSTATE '50001' SET MESSAGE_TEXT = 'ID_CURRICULUM DOES NOT CORRESPOND WITH THE SUBJECTS STUDIED BY NR_MATRICOL!';
 	END IF;
     
    -- ZIUA SI ORA NOTEI SA FIE ZI SI ORA IN CARE ELEVUL ARE MATERIA RESPECTIVA IN ORAR 
     
    IF (WEEKDAY(NEW.DATA_NOTA), NEW.ORA_NOTA) NOT IN
    (
    SELECT CODURI_ZILE.ID_ZI, ORAR.ORA
 	FROM ELEVI,
 		 ORAR,
 		 CODURI_ZILE
 	WHERE ELEVI.NR_MATRICOL = NEW.NR_MATRICOL
 	AND ELEVI.ID_CLASA = ORAR.ID_CLASA
 	AND ORAR.ZI = CODURI_ZILE.DENUMIRE_ZI
 	AND ORAR.ID_DISCIPLINA = NEW.ID_DISCIPLINA
    ) THEN
		SIGNAL SQLSTATE '50002' SET MESSAGE_TEXT = 'THIS STUDENT DOES NOT HAVE THIS SUBJECT IN THIS DAY AND HOUR IN THE SCHEDULE!';
 	END IF;
     
    -- ELEVUL NU ARE DEJA NOTA LA DATA SI ORA ACEEA PT MATERIA RESPECTIVA!
     
    IF 
 	(
    SELECT COUNT(*) FROM CATALOG_NOTE
    WHERE NR_MATRICOL = NEW.NR_MATRICOL
    AND ID_DISCIPLINA = NEW.ID_DISCIPLINA
    AND DATA_NOTA = NEW.DATA_NOTA
    AND ORA_NOTA = NEW.ORA_NOTA
    ) > 0 THEN
		SIGNAL SQLSTATE '50003' SET MESSAGE_TEXT = 'THE STUDENT HAS ALREADY A GRADE FOR THIS SUBJECT AT THIS TIME AND DATE!';
 	END IF;
     
    -- DATA NOTEI TREBUIE SA FIE IN PERIOADA DE ACTIVITATE SCOLARA!
     
    IF 'A' NOT IN 
    (
    SELECT TIP_PERIOADA FROM CALENDAR_SCOLAR
    WHERE NEW.DATA_NOTA BETWEEN CALENDAR_SCOLAR.DATA_INCEPUT AND CALENDAR_SCOLAR.DATA_SFARSIT
    ) THEN
		SIGNAL SQLSTATE '50004' SET MESSAGE_TEXT = 'THIS DATE IS NOT IN THE SCHOOL ACTIVITY INTERVAL!';
    END IF;
     
    -- DATA NOTEI NU TREBUIE SA FIE IN VIITOR
     
    IF (CURRENT_DATE() < NEW.DATA_NOTA) THEN
		SIGNAL SQLSTATE '50005' SET MESSAGE_TEXT = 'CANNOT USE A DATE IN THE FUTURE!';
 	END IF;
     
    -- DATA SI ORA NOTEI TREBUIE SA FIE UNA IN CARE NU ARE ABSENTA LA MATERIA RESPECTIVA!
     
    IF 
    (
    SELECT COUNT(*) FROM CATALOG_ABSENTE
    WHERE CATALOG_ABSENTE.NR_MATRICOL = NEW.NR_MATRICOL
    AND CATALOG_ABSENTE.ID_DISCIPLINA = NEW.ID_DISCIPLINA
    AND CATALOG_ABSENTE.DATA_ABSENTA = NEW.DATA_NOTA
    AND CATALOG_ABSENTE.ORA_ABSENTA = NEW.ORA_NOTA
    ) <> 0 THEN
		SIGNAL SQLSTATE '50006' SET MESSAGE_TEXT = 'THE STUDENT HAS AN ABSENCE AT THAT TIME!';
 	END IF;
     
END$
DELIMITER ;

-- CREATE TRIGGER CATALOG_NOTE_BEFORE_UPDATE

DELIMITER $
CREATE TRIGGER CATALOG_NOTE_BEFORE_UPDATE 
BEFORE UPDATE ON CATALOG_NOTE
FOR EACH ROW 
BEGIN
 	DECLARE MESSAGE_TEXT VARCHAR(100);
 	
    -- NOTA SA FIE INTRE 1 SI 10
     
    IF (NEW.NOTA < 1) OR (NEW.NOTA > 10) THEN
		SIGNAL SQLSTATE '50000' SET MESSAGE_TEXT = 'NOTA IS NOT BETWEEN 1 AND 10';
 	END IF;
 	
    -- ID_DISCIPLINA SA FIE STUDIATA DE ELEV LA CLASA SI PROFIL
    
    IF (NEW.ID_DISCIPLINA) NOT IN
    (
    SELECT CURRICULUM_PROFIL.ID_DISCIPLINA
 	FROM ELEVI,
 		 CLASE,
 		 CURRICULUM_PROFIL
 	WHERE ELEVI.NR_MATRICOL = NEW.NR_MATRICOL
 	AND ELEVI.ID_CLASA = CLASE.ID_CLASA
 	AND CLASE.CLASA = CURRICULUM_PROFIL.ID_AN_CLASA
 	AND CLASE.ID_PROFIL = CURRICULUM_PROFIL.ID_PROFIL
    ) THEN
		SIGNAL SQLSTATE '50001' SET MESSAGE_TEXT = 'ID_CURRICULUM DOES NOT CORRESPOND WITH THE SUBJECTS STUDIED BY NR_MATRICOL!';
 	END IF;
     
    -- ZIUA SI ORA NOTEI SA FIE ZI SI ORA IN CARE ELEVUL ARE MATERIA RESPECTIVA IN ORAR 
     
    IF (WEEKDAY(NEW.DATA_NOTA), NEW.ORA_NOTA) NOT IN
    (
    SELECT CODURI_ZILE.ID_ZI, ORAR.ORA
 	FROM ELEVI,
 		 ORAR,
 		 CODURI_ZILE
 	WHERE ELEVI.NR_MATRICOL = NEW.NR_MATRICOL
 	AND ELEVI.ID_CLASA = ORAR.ID_CLASA
 	AND ORAR.ZI = CODURI_ZILE.DENUMIRE_ZI
 	AND ORAR.ID_DISCIPLINA = NEW.ID_DISCIPLINA
    ) THEN
		SIGNAL SQLSTATE '50002' SET MESSAGE_TEXT = 'THIS STUDENT DOES NOT HAVE THIS SUBJECT IN THIS DAY AND HOUR IN THE SCHEDULE!';
 	END IF;
     
    -- ELEVUL NU ARE DEJA NOTA LA DATA SI ORA ACEEA PT MATERIA RESPECTIVA!
     
    IF 
 	(
    SELECT COUNT(*) FROM CATALOG_NOTE
    WHERE NR_MATRICOL = NEW.NR_MATRICOL
    AND ID_DISCIPLINA = NEW.ID_DISCIPLINA
    AND DATA_NOTA = NEW.DATA_NOTA
    AND ORA_NOTA = NEW.ORA_NOTA
    ) > 0 THEN
		SIGNAL SQLSTATE '50003' SET MESSAGE_TEXT = 'THE STUDENT HAS ALREADY A GRADE FOR THIS SUBJECT AT THIS TIME AND DATE!';
 	END IF;
     
    -- DATA NOTEI TREBUIE SA FIE IN PERIOADA DE ACTIVITATE SCOLARA!
     
    IF 'A' NOT IN 
    (
    SELECT TIP_PERIOADA FROM CALENDAR_SCOLAR
    WHERE NEW.DATA_NOTA BETWEEN CALENDAR_SCOLAR.DATA_INCEPUT AND CALENDAR_SCOLAR.DATA_SFARSIT
    ) THEN
		SIGNAL SQLSTATE '50004' SET MESSAGE_TEXT = 'THIS DATE IS NOT IN THE SCHOOL ACTIVITY INTERVAL!';
    END IF;
     
    -- DATA NOTEI NU TREBUIE SA FIE IN VIITOR
     
    IF (CURRENT_DATE() < NEW.DATA_NOTA) THEN
		SIGNAL SQLSTATE '50005' SET MESSAGE_TEXT = 'CANNOT USE A DATE IN THE FUTURE!';
 	END IF;
     
    -- DATA SI ORA NOTEI TREBUIE SA FIE UNA IN CARE NU ARE ABSENTA LA MATERIA RESPECTIVA!
     
    IF 
    (
    SELECT COUNT(*) FROM CATALOG_ABSENTE
    WHERE CATALOG_ABSENTE.NR_MATRICOL = NEW.NR_MATRICOL
    AND CATALOG_ABSENTE.ID_DISCIPLINA = NEW.ID_DISCIPLINA
    AND CATALOG_ABSENTE.DATA_ABSENTA = NEW.DATA_NOTA
    AND CATALOG_ABSENTE.ORA_ABSENTA = NEW.ORA_NOTA
    ) <> 0 THEN
		SIGNAL SQLSTATE '50006' SET MESSAGE_TEXT = 'THE STUDENT HAS AN ABSENCE AT THAT TIME!';
 	END IF;
     
END$
DELIMITER ;

-- CREATE TABLE CATALOG_ABSENTE

CREATE TABLE COLEGIUL_CODREANU.CATALOG_ABSENTE
(
NR_MATRICOL INT(8),
ID_DISCIPLINA SMALLINT(2),
DATA_NOTA DATE NOT NULL,
ORA_NOTA TIME NOT NULL,
TIP_ABSENTA CHAR(1) NOT NULL,
PRIMARY KEY (NR_MATRICOL, ID_DISCIPLINA, DATA_NOTA, ORA_NOTA),
FOREIGN KEY NR_MAT_FK (NR_MATRICOL) REFERENCES ELEVI(NR_MATRICOL) ON DELETE NO ACTION ON UPDATE CASCADE,
FOREIGN KEY ID_DISC_FK3 (ID_DISCIPLINA) REFERENCES DISCIPLINE(ID_DISCIPLINA) ON DELETE NO ACTION ON UPDATE CASCADE,
FOREIGN KEY TIP_ABS_FK (TIP_ABSENTA) REFERENCES CATEGORII_ABSENTE (TIP_ABSENTA) ON DELETE NO ACTION ON UPDATE CASCADE
);

-- CREATE TRIGGER CATALOG_ABSENTE_BEFORE_INSERT

DELIMITER $
CREATE TRIGGER CATALOG_ABSENTE_BEFORE_INSERT 
BEFORE INSERT ON CATALOG_ABSENTE 
FOR EACH ROW 
BEGIN
 	DECLARE MESSAGE_TEXT VARCHAR(100);
 	
    -- ID_DISCIPLINA SA FIE STUDIATA DE ELEV LA CLASA SI PROFIL
     
    IF (NEW.ID_DISCIPLINA) NOT IN
    (
    SELECT CURRICULUM_PROFIL.ID_DISCIPLINA
 	FROM ELEVI,
 		 CLASE,
 		 CURRICULUM_PROFIL
 	WHERE ELEVI.NR_MATRICOL = NEW.NR_MATRICOL
 	AND ELEVI.ID_CLASA = CLASE.ID_CLASA
 	AND CLASE.CLASA = CURRICULUM_PROFIL.ID_AN_CLASA
 	AND CLASE.ID_PROFIL = CURRICULUM_PROFIL.ID_PROFIL
    ) THEN
 		SIGNAL SQLSTATE '50001' SET MESSAGE_TEXT = 'ID_CURRICULUM DOES NOT CORRESPOND WITH THE SUBJECTS STUDIED BY NR_MATRICOL!';
 	END IF;
     
    -- ZIUA SI ORA NOTEI SA FIE ZI SI ORA IN CARE ELEVUL ARE MATERIA RESPECTIVA IN ORAR 
     
    IF (WEEKDAY(NEW.DATA_ABSENTA), NEW.ORA_ABSENTA) NOT IN
    (
    SELECT CODURI_ZILE.ID_ZI, ORAR.ORA
 	FROM ELEVI,
 		 ORAR,
 		 CODURI_ZILE
 	WHERE ELEVI.NR_MATRICOL = NEW.NR_MATRICOL
 	AND ELEVI.ID_CLASA = ORAR.ID_CLASA
 	AND ORAR.ZI = CODURI_ZILE.DENUMIRE_ZI
 	AND ORAR.ID_DISCIPLINA = NEW.ID_DISCIPLINA
    ) THEN
 		SIGNAL SQLSTATE '50002' SET MESSAGE_TEXT = 'THIS STUDENT DOES NOT HAVE THIS SUBJECT IN THIS DAY AND HOUR IN THE SCHEDULE!';
 	END IF;
     
    -- ELEVUL NU ARE DEJA NOTA LA DATA SI ORA ACEEA PT MATERIA RESPECTIVA!
     
    IF 
 	(
    SELECT COUNT(*) FROM CATALOG_ABSENTE
    WHERE NR_MATRICOL = NEW.NR_MATRICOL
    AND ID_DISCIPLINA = NEW.ID_DISCIPLINA
    AND DATA_ABSENTA = NEW.DATA_ABSENTA
    AND ORA_ABSENTA = NEW.ORA_ABSENTA
    ) > 0 THEN
 		SIGNAL SQLSTATE '50003' SET MESSAGE_TEXT = 'THE STUDENT HAS ALREADY AN ABSENCE FOR THIS SUBJECT AT THIS TIME AND DATE!';
 	END IF;
     
    -- DATA NOTEI TREBUIE SA FIE IN PERIOADA DE ACTIVITATE SCOLARA!
     
    IF 'A' NOT IN 
    (
    SELECT TIP_PERIOADA FROM CALENDAR_SCOLAR
    WHERE NEW.DATA_ABSENTA BETWEEN CALENDAR_SCOLAR.DATA_INCEPUT AND CALENDAR_SCOLAR.DATA_SFARSIT
    ) THEN
 		SIGNAL SQLSTATE '50004' SET MESSAGE_TEXT = 'THIS DATE IS NOT IN THE SCHOOL ACTIVITY INTERVAL!';
    END IF;
     
    -- DATA NOTEI NU TREBUIE SA FIE IN VIITOR
     
    IF (CURRENT_DATE() < NEW.DATA_ABSENTA) THEN
 		SIGNAL SQLSTATE '50005' SET MESSAGE_TEXT = 'CANNOT USE A DATE IN THE FUTURE!';
 	END IF;
     
    -- DATA SI ORA NOTEI TREBUIE SA FIE UNA IN CARE NU ARE ABSENTA LA MATERIA RESPECTIVA!
     
    IF 
    (
    SELECT COUNT(*) FROM CATALOG_NOTE
    WHERE CATALOG_NOTE.NR_MATRICOL = NEW.NR_MATRICOL
    AND CATALOG_NOTE.ID_DISCIPLINA = NEW.ID_DISCIPLINA
    AND CATALOG_NOTE.DATA_NOTA = NEW.DATA_ABSENTA
    AND CATALOG_NOTE.ORA_NOTA = NEW.ORA_ABSENTA
    ) <> 0 THEN
 		SIGNAL SQLSTATE '50006' SET MESSAGE_TEXT = 'THE STUDENT HAS A GRADE AT THAT TIME!';
 	END IF;
     
END$
DELIMITER ;

-- CREATE TRIGGER CATALOG_ABSENTE_BEFORE_UPDATE

DELIMITER $
CREATE TRIGGER CATALOG_ABSENTE_BEFORE_UPDATE 
BEFORE UPDATE ON CATALOG_ABSENTE 
FOR EACH ROW 
BEGIN
 	DECLARE MESSAGE_TEXT VARCHAR(100);
 	
    -- ID_DISCIPLINA SA FIE STUDIATA DE ELEV LA CLASA SI PROFIL
     
    IF (NEW.ID_DISCIPLINA) NOT IN
    (
    SELECT CURRICULUM_PROFIL.ID_DISCIPLINA
 	FROM ELEVI,
 		 CLASE,
 		 CURRICULUM_PROFIL
 	WHERE ELEVI.NR_MATRICOL = NEW.NR_MATRICOL
 	AND ELEVI.ID_CLASA = CLASE.ID_CLASA
 	AND CLASE.CLASA = CURRICULUM_PROFIL.ID_AN_CLASA
 	AND CLASE.ID_PROFIL = CURRICULUM_PROFIL.ID_PROFIL
    ) THEN
 		SIGNAL SQLSTATE '50001' SET MESSAGE_TEXT = 'ID_CURRICULUM DOES NOT CORRESPOND WITH THE SUBJECTS STUDIED BY NR_MATRICOL!';
 	END IF;
     
    -- ZIUA SI ORA NOTEI SA FIE ZI SI ORA IN CARE ELEVUL ARE MATERIA RESPECTIVA IN ORAR 
     
    IF (WEEKDAY(NEW.DATA_ABSENTA), NEW.ORA_ABSENTA) NOT IN
    (
    SELECT CODURI_ZILE.ID_ZI, ORAR.ORA
 	FROM ELEVI,
 		 ORAR,
 		 CODURI_ZILE
 	WHERE ELEVI.NR_MATRICOL = NEW.NR_MATRICOL
 	AND ELEVI.ID_CLASA = ORAR.ID_CLASA
 	AND ORAR.ZI = CODURI_ZILE.DENUMIRE_ZI
 	AND ORAR.ID_DISCIPLINA = NEW.ID_DISCIPLINA
    ) THEN
 		SIGNAL SQLSTATE '50002' SET MESSAGE_TEXT = 'THIS STUDENT DOES NOT HAVE THIS SUBJECT IN THIS DAY AND HOUR IN THE SCHEDULE!';
 	END IF;
     
    -- ELEVUL NU ARE DEJA NOTA LA DATA SI ORA ACEEA PT MATERIA RESPECTIVA!
     
    IF 
 	(
    SELECT COUNT(*) FROM CATALOG_ABSENTE
    WHERE NR_MATRICOL = NEW.NR_MATRICOL
    AND ID_DISCIPLINA = NEW.ID_DISCIPLINA
    AND DATA_ABSENTA = NEW.DATA_ABSENTA
    AND ORA_ABSENTA = NEW.ORA_ABSENTA
    ) > 0 THEN
 		SIGNAL SQLSTATE '50003' SET MESSAGE_TEXT = 'THE STUDENT HAS ALREADY AN ABSENCE FOR THIS SUBJECT AT THIS TIME AND DATE!';
 	END IF;
     
    -- DATA NOTEI TREBUIE SA FIE IN PERIOADA DE ACTIVITATE SCOLARA!
     
    IF 'A' NOT IN 
    (
    SELECT TIP_PERIOADA FROM CALENDAR_SCOLAR
    WHERE NEW.DATA_ABSENTA BETWEEN CALENDAR_SCOLAR.DATA_INCEPUT AND CALENDAR_SCOLAR.DATA_SFARSIT
    ) THEN
 		SIGNAL SQLSTATE '50004' SET MESSAGE_TEXT = 'THIS DATE IS NOT IN THE SCHOOL ACTIVITY INTERVAL!';
    END IF;
     
    -- DATA NOTEI NU TREBUIE SA FIE IN VIITOR
     
    IF (CURRENT_DATE() < NEW.DATA_ABSENTA) THEN
 		SIGNAL SQLSTATE '50005' SET MESSAGE_TEXT = 'CANNOT USE A DATE IN THE FUTURE!';
 	END IF;
     
    -- DATA SI ORA NOTEI TREBUIE SA FIE UNA IN CARE NU ARE ABSENTA LA MATERIA RESPECTIVA!
     
    IF 
    (
    SELECT COUNT(*) FROM CATALOG_NOTE
    WHERE CATALOG_NOTE.NR_MATRICOL = NEW.NR_MATRICOL
    AND CATALOG_NOTE.ID_DISCIPLINA = NEW.ID_DISCIPLINA
    AND CATALOG_NOTE.DATA_NOTA = NEW.DATA_ABSENTA
    AND CATALOG_NOTE.ORA_NOTA = NEW.ORA_ABSENTA
    ) <> 0 THEN
 		SIGNAL SQLSTATE '50006' SET MESSAGE_TEXT = 'THE STUDENT HAS A GRADE AT THAT TIME!';
 	END IF;
     
END$
DELIMITER ;

-- CREATE TABLE CODURI_ZILE

CREATE TABLE COLEGIUL_CODREANU.CODURI_ZILE 
(
   ID_ZI TINYINT(1) NOT NULL,
   DENUMIRE_ZI VARCHAR(10) NOT NULL,
   PRIMARY KEY (ID_ZI,DENUMIRE_ZI)
);